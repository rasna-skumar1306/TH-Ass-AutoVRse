{"version":3,"sources":["shapes.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["CubeMesh","position","color","speed","args","id","setCurrentId","useBox","mass","ref","api","useState","expand","setExpand","mesh","onClick","velocity","set","castShadow","attach","MeshWobbleMaterial","factor","CylindricalMesh","useCylinder","SphericalMesh","useSphere","SetLights","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","GroundLayer","usePlane","rotation","Math","PI","receiveShadow","opacity","randomInt","num","ceil","random","round","floor","App","shapes","setShapes","useEffect","generateShape","shape","c","vertices","updatedShape","map","props","length","push","RenderShapes","className","model","filter","geomentryModel","i","shadowMap","colorManagement","camera","fov","console","log","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.89d1f649.chunk.js","sourcesContent":["import { useBox, useCylinder, useSphere } from '@react-three/cannon'\r\nimport { MeshWobbleMaterial } from '@react-three/drei'\r\nimport { useState } from 'react'\r\nimport { a } from 'react-spring/three'\r\n\r\nconst CubeMesh = ({ position, color, speed, args, id, setCurrentId }) => {\r\n  const [ref, api] = useBox(() => ({ mass: 1, position: position }))\r\n\r\n  const [expand, setExpand] = useState(false)\r\n\r\n  const animate = () => {\r\n    setExpand(!expand)\r\n    api.velocity.set(0, 3, 0)\r\n  }\r\n\r\n  return (\r\n    <a.mesh\r\n      key={id}\r\n      position={position}\r\n      ref={ref}\r\n      onClick={() => {\r\n        animate()\r\n        setCurrentId(id)\r\n      }}\r\n      castShadow\r\n    >\r\n      <boxBufferGeometry attach='geometry' args={args} />\r\n      {expand ? (\r\n        <MeshWobbleMaterial\r\n          color={color}\r\n          speed={speed}\r\n          attach='material'\r\n          factor={0.6}\r\n        />\r\n      ) : (\r\n        <meshLambertMaterial attach='material' color={color} />\r\n      )}\r\n    </a.mesh>\r\n  )\r\n}\r\n\r\nconst CylindricalMesh = ({\r\n  position,\r\n  color,\r\n  speed,\r\n  args,\r\n  id,\r\n  setCurrentId,\r\n}) => {\r\n  const [ref, api] = useCylinder(() => ({ mass: 1, position: position }))\r\n  const [expand, setExpand] = useState(false)\r\n\r\n  const animate = () => {\r\n    setExpand(!expand)\r\n    api.velocity.set(0, 3, 0)\r\n  }\r\n\r\n  return (\r\n    <a.mesh\r\n      key={id}\r\n      position={position}\r\n      ref={ref}\r\n      onClick={() => {\r\n        animate()\r\n        setCurrentId(id)\r\n      }}\r\n      castShadow\r\n    >\r\n      <cylinderBufferGeometry attach='geometry' args={args} />\r\n      {expand ? (\r\n        <MeshWobbleMaterial\r\n          color={color}\r\n          speed={speed}\r\n          attach='material'\r\n          factor={0.6}\r\n        />\r\n      ) : (\r\n        <meshLambertMaterial attach='material' color={color} />\r\n      )}\r\n    </a.mesh>\r\n  )\r\n}\r\n\r\nconst SphericalMesh = ({ position, color, speed, args, id, setCurrentId }) => {\r\n  const [ref, api] = useSphere(() => ({ mass: 1, position: position }))\r\n  const [expand, setExpand] = useState(false)\r\n\r\n  const animate = () => {\r\n    setExpand(!expand)\r\n    api.velocity.set(0, 3, 0)\r\n  }\r\n\r\n  return (\r\n    <a.mesh\r\n      key={id}\r\n      position={position}\r\n      ref={ref}\r\n      onClick={() => {\r\n        animate()\r\n        setCurrentId(id)\r\n      }}\r\n      castShadow\r\n    >\r\n      <sphereBufferGeometry attach='geometry' args={args} />\r\n      {expand ? (\r\n        <MeshWobbleMaterial\r\n          color={color}\r\n          speed={speed}\r\n          attach='material'\r\n          factor={0.6}\r\n        />\r\n      ) : (\r\n        <meshPhysicalMaterial attach='material' color={color} />\r\n      )}\r\n    </a.mesh>\r\n  )\r\n}\r\n\r\nexport { CubeMesh, CylindricalMesh, SphericalMesh }\r\n","import { OrbitControls } from '@react-three/drei'\nimport { Canvas } from 'react-three-fiber'\nimport { Physics, usePlane } from '@react-three/cannon'\n\nimport { CubeMesh, CylindricalMesh, SphericalMesh } from './shapes.component'\n\nimport './App.scss'\nimport { useEffect, useState } from 'react'\n\nconst SetLights = () => (\n  <mesh>\n    <ambientLight intensity={0.3} />\n    <directionalLight\n      castShadow\n      position={[0, 10, 0]}\n      intensity={1.5}\n      shadow-mapSize-width={1024}\n      shadow-mapSize-height={1024}\n      shadow-camera-far={50}\n      shadow-camera-left={-10}\n      shadow-camera-right={10}\n      shadow-camera-top={10}\n      shadow-camera-bottom={-10}\n    />\n    <pointLight position={[-10, 0, -20]} intensity={0.5} />\n    <pointLight position={[0, -10, 0]} intensity={1.5} />\n  </mesh>\n)\n\nconst GroundLayer = () => {\n  const [ref] = usePlane(() => ({\n    position: [0, -1, 0],\n    rotation: [-Math.PI / 2, 0, 0],\n  }))\n  return (\n    <group>\n      <mesh\n        ref={ref}\n        rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -0.95, 0]}\n        receiveShadow\n      >\n        <planeBufferGeometry attach='geometry' args={[300, 300]} />\n        <shadowMaterial attach='material' opacity={0.2} />\n      </mesh>\n      <mesh\n        ref={ref}\n        rotation={[-Math.PI / 2, 0, 0]}\n        position={[0, -1, 0]}\n        receiveShadow\n      >\n        <planeBufferGeometry attach='geometry' args={[300, 300]} />\n        <meshBasicMaterial attach='material' color='lightblue' />\n      </mesh>\n    </group>\n  )\n}\n\nconst randomInt = (num) =>\n  num < 0\n    ? Math.ceil(Math.random() * num) * (Math.round(Math.random()) ? 1 : -1)\n    : Math.floor(Math.random() * num + 1)\n\nfunction App() {\n  const [shapes, setShapes] = useState([])\n  const [currentId, setCurrentId] = useState(null)\n\n  useEffect(() => {}, [shapes])\n\n  const generateShape = (shape) => {\n    const colors = [\n      'skyblue',\n      'red',\n      'yellow',\n      'orange',\n      'pink',\n      'hotpink',\n      'blue',\n      'green',\n      'lightgreen',\n    ]\n    const c = colors[randomInt(9)]\n    let vertices = [randomInt(-20), randomInt(-10), randomInt(-10)]\n\n    let updatedShape = shapes.map((props) => ({ ...props }))\n    let id = updatedShape.length\n\n    updatedShape.push({\n      shape: shape,\n      color: c,\n      position: vertices,\n      id: id + 1,\n    })\n    setShapes([...updatedShape])\n  }\n\n  const RenderShapes = ({ shape, position, color, id, setCurrentId }) => {\n    switch (shape) {\n      case 'cube':\n        return (\n          <CubeMesh\n            key={id}\n            position={position}\n            color={color}\n            id={id}\n            setCurrentId={setCurrentId}\n          />\n        )\n      case 'sphere':\n        return (\n          <SphericalMesh\n            key={id}\n            position={position}\n            color={color}\n            id={id}\n            setCurrentId={setCurrentId}\n          />\n        )\n      case 'cylinder':\n        return (\n          <CylindricalMesh\n            key={id}\n            position={position}\n            color={color}\n            id={id}\n            setCurrentId={setCurrentId}\n          />\n        )\n      default:\n        return <CubeMesh position={position} color={color} id={id} />\n    }\n  }\n\n  const deleteShape = (id) =>\n    setShapes((model) => model.filter((geomentryModel, i) => i !== 0))\n\n  return (\n    <>\n      <div className='btns'>\n        <button onClick={() => generateShape('cube')}>Cube</button>\n        <button onClick={() => generateShape('sphere')}>Sphere</button>\n        <button onClick={() => generateShape('cylinder')}>Cylinder</button>\n        <button onClick={() => deleteShape(currentId)}>Delete</button>\n      </div>\n      <Canvas\n        shadowMap\n        colorManagement\n        camera={{ position: [-5, 2, 10], fov: 60 }}\n      >\n        <SetLights />\n        <Physics>\n          {shapes.map(({ id, color, position, shape }) => (\n            <RenderShapes\n              id={id}\n              shape={shape}\n              color={color}\n              position={position}\n              setCurrentId={(id) => {\n                setCurrentId(id)\n                console.log(id)\n              }}\n            />\n          ))}\n\n          <GroundLayer />\n        </Physics>\n        <OrbitControls />\n      </Canvas>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}